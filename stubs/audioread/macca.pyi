import ctypes.util
from .exceptions import DecodeError as DecodeError
from _typeshed import Incomplete
from collections.abc import Generator

def multi_char_literal(chars): ...

PROP_FILE_DATA_FORMAT: Incomplete
PROP_CLIENT_DATA_FORMAT: Incomplete
PROP_LENGTH: Incomplete
AUDIO_ID_PCM: Incomplete
PCM_IS_FLOAT: Incomplete
PCM_IS_BIG_ENDIAN: Incomplete
PCM_IS_SIGNED_INT: Incomplete
PCM_IS_PACKED: Incomplete
ERROR_TYPE: Incomplete
ERROR_FORMAT: Incomplete
ERROR_NOT_FOUND: int

class MacError(DecodeError):
    def __init__(self, code) -> None: ...

def check(err) -> None: ...

class CFObject:
    def __init__(self, obj) -> None: ...
    def __del__(self) -> None: ...

class CFURL(CFObject):
    def __init__(self, filename) -> None: ...

class AudioStreamBasicDescription(ctypes.Structure): ...
class AudioBuffer(ctypes.Structure): ...
class AudioBufferList(ctypes.Structure): ...

class ExtAudioFile:
    closed: bool
    def __init__(self, filename) -> None: ...
    def set_client_format(self, desc) -> None: ...
    def get_file_format(self): ...
    @property
    def channels(self): ...
    @property
    def samplerate(self): ...
    @property
    def duration(self): ...
    @property
    def nframes(self): ...
    def setup(self, bitdepth: int = ...) -> None: ...
    def read_data(self, blocksize: int = ...) -> Generator[Incomplete, None, None]: ...
    def close(self) -> None: ...
    def __del__(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_val, exc_tb): ...
    def __iter__(self): ...
